/* Generated By:JavaCC: Do not edit this line. Calculator.java */
import java.util.HashMap;
import java.util.Map;

public class Calculator implements CalculatorConstants {

       private static Map<String, Integer> variables = new HashMap<String, Integer>();

       public static void main(String args[]) throws ParseException {
           Calculator parser = new Calculator(System.in);
           parser.Sesion();
       }

       // obtenemos valor variable
       private static int obtenerValorVariable(String id) {
           if (variables.containsKey(id)) {
               return variables.get(id);
           } else {
               throw new RuntimeException("Variable no definida: " + id);
           }
       }

       // asignamos un valor a una variable
       private static void asignarValorVariable(String id, int valor) {
           variables.put(id, valor);
       }

//iniciamos sesion del analisis
  static final public void Sesion() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Declaracion();
    }
    label_2:
    while (true) {
      Sentencia();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
      case BINARIO:
      case OCTAL:
      case ID:
      case 20:
      case 22:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
  }

//regla para la definicion de variables
  static final public void Declaracion() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(ID);
    jj_consume_token(EOL);
  }

//reglas para la sentencia
  static final public int Sentencia() throws ParseException {
    int resultado;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      resultado = Asignacion();
      break;
    case DECIMAL:
    case BINARIO:
    case OCTAL:
    case 20:
      Expresion();
      break;
    case 22:
      Condicional();
      jj_consume_token(EOL);
      {if (true) return resultado;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//reglas asignacion
  static final public int Asignacion() throws ParseException {
    String id;
    int valor;
    id = jj_consume_token(ID);
    jj_consume_token(19);
    valor = Expresion();
      asignarValorVariable(id, valor); {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

//regla para las expresiones aritmeticas
  static final public int Expresion() throws ParseException {
    int valor;
    valor = Termino();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        break;
      case RESTA:
        jj_consume_token(RESTA);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Termino();
    }
      {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

//regla para terminos en las expresiones aritmeticas
  static final public int Termino() throws ParseException {
    int valor;
    valor = Factor();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTI:
      case DIV:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTI:
        jj_consume_token(MULTI);
        Factor();
        break;
      case DIV:
        jj_consume_token(DIV);
        Factor();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

//regla para factores
  static final public int Factor() throws ParseException {
    Token t;
    int valor;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
      t = jj_consume_token(DECIMAL);
                        valor = Integer.parseInt(t.image);
      break;
    case OCTAL:
      t = jj_consume_token(OCTAL);
                        valor = Integer.parseInt(t.image, 8);
      break;
    case BINARIO:
      t = jj_consume_token(BINARIO);
                          valor = Integer.parseInt(t.image.substring(2), 2);
      break;
    case ID:
      t = jj_consume_token(ID);
                     valor = obtenerValorVariable(t.image);
      break;
    case 20:
      jj_consume_token(20);
      valor = Expresion();
      jj_consume_token(21);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

//regla para condicionales
  static final public int Condicional() throws ParseException {
    boolean condicion;
    int valorVerdadero, valorFalso;
    jj_consume_token(22);
    jj_consume_token(20);
    condicion = ExpBooleana();
    jj_consume_token(21);
    valorVerdadero = Expresion();
    jj_consume_token(23);
    valorFalso = Expresion();
      {if (true) return condicion ? valorVerdadero : valorFalso;}
    throw new Error("Missing return statement in function");
  }

//regla para expresiones boleanas
  static final public boolean ExpBooleana() throws ParseException {
    boolean valor;
    valor = Comparacion();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        Comparacion();
        break;
      case OR:
        jj_consume_token(OR);
        Comparacion();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

//regla para comparaciones
  static final public boolean Comparacion() throws ParseException {
    int izquierda, derecha;
    boolean resultado;
    izquierda = Expresion();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOR:
      jj_consume_token(MENOR);
      derecha = Expresion();
                                        resultado = izquierda < derecha;
      break;
    case MAYOR:
      jj_consume_token(MAYOR);
      derecha = Expresion();
                                          resultado = izquierda > derecha;
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      derecha = Expresion();
                                          resultado = izquierda == derecha;
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return resultado;}
    throw new Error("Missing return statement in function");
  }

  static final public void EndOfFile() throws ParseException {
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalculatorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x50003c,0x50003c,0x3000,0x3000,0xc000,0xc000,0x10003c,0x30000,0x30000,0xe00,};
   }

  /** Constructor with InputStream. */
  public Calculator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Calculator(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Calculator(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Calculator(CalculatorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CalculatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
